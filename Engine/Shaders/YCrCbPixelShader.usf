#include "Common.usf"

float3 fromRGB( float3 rgb, float Kr, float Kb ) {
       float y = Kr * rgb.r + Kb * rgb.b + (1.f-Kr-Kb) * rgb.g;
       float cb = 0.5f * (rgb.b - y)/(1.f - Kb);
       float cr = 0.5f * (rgb.r - y)/(1.f - Kr);
       return float3( y, cr + 0.5, cb + 0.5 );
}

float outputScale = 1.0;
float targetWidth = 1024;
float atiScaleHack = 1.0; //guess?

float2 inputPixelOffset = { 0.5 / 1024.0, 0.5 / 768.0 };
float2 letterboxOffset = { 0.0, 0.0 };

int downsampled = 0;

float4 transformColour( float4 rgba ) {
	return rgba;
}

float3 fromRGB_toYCrCb_Gamma( float4 rgba ){
	return fromRGB(
		saturate(sqrt(rgba.xyz)), 0.299, 0.114 );
}

float4 scene( float2 t ) {	
	float4 result = 0.0;
	if( t.x >= 0.0 && t.x <= 1.0 && t.y >= 0.0 && t.y <= 1.0 ) {
		float2 off = 0.5 / float2( targetWidth, targetWidth * 0.75f );
		//do a little bit of extra sampling to reduce aliasing
		result  = tex2D( SceneColorTexture, t );
		result += tex2D( SceneColorTexture, t + off * float2(1,0) );
		result += tex2D( SceneColorTexture, t + off * float2(0,1) );
		result += tex2D( SceneColorTexture, t + off );
		result *= 0.25f;
		
	}
	return result;
}

void Main(
	float4 tex : TEXCOORD0,
	out float4 OutY  : COLOR0,
	out float4 OutCr : COLOR1,
	out float4 OutCb : COLOR2
	)
{
#if SM2_PROFILE
	OutY = outputScale;
	OutCr = 1 / targetWidth;
	OutCb = inputPixelOffset.xyxy;
#else
	tex.xy += inputPixelOffset;
	float2 t = tex.xy * float2(1.0,1.0) / outputScale;
	float2 dx = float2( 1.f/targetWidth,  0.f ) / outputScale; //from resolution
	
	t *= float2( atiScaleHack, 1.0 );
	
	float4 rgba_0 = transformColour( scene( t.xy - letterboxOffset ));
	float4 rgba_1 = transformColour( scene( t.xy - letterboxOffset + dx ));
	float4 rgba_2 = transformColour( scene( t.xy - letterboxOffset + dx * 2.0 ));
	float4 rgba_3 = transformColour( scene( t.xy - letterboxOffset + dx * 3.0 ));
	
	//half-res chroma
	float2 q = t.xy * 2.f;
	float2 dx2 = dx * 2.f;
	float4 rgba2_0 = transformColour( scene( q.xy - letterboxOffset ));
	float4 rgba2_1 = transformColour( scene( q.xy - letterboxOffset + dx2 ));
	float4 rgba2_2 = transformColour( scene( q.xy - letterboxOffset + dx2 * 2.0 ));
	float4 rgba2_3 = transformColour( scene( q.xy - letterboxOffset + dx2 * 3.0 ));
	
	//convert!
	float3 yuv_0 = fromRGB_toYCrCb_Gamma(rgba_0);
	float3 yuv_1 = fromRGB_toYCrCb_Gamma(rgba_1);
	float3 yuv_2 = fromRGB_toYCrCb_Gamma(rgba_2);
	float3 yuv_3 = fromRGB_toYCrCb_Gamma(rgba_3);
	
	//half-res chroma
	float3 yuv2_0 = fromRGB_toYCrCb_Gamma(rgba2_0);
	float3 yuv2_1 = fromRGB_toYCrCb_Gamma(rgba2_1);
	float3 yuv2_2 = fromRGB_toYCrCb_Gamma(rgba2_2);
	float3 yuv2_3 = fromRGB_toYCrCb_Gamma(rgba2_3);
	
	//swizzle so colour bytes assigned to pixel columns match physical layout in memory
	OutY  = float4( yuv_0.x, yuv_1.x, yuv_2.x, yuv_3.x ).zyxw;
	OutCb = float4( yuv2_0.y, yuv2_1.y, yuv2_2.y, yuv2_3.y ).zyxw;
	OutCr = float4( yuv2_0.z, yuv2_1.z, yuv2_2.z, yuv2_3.z ).zyxw;
	
#endif	
}
